[1]

- Install latest Node
- Install React Dev Tools for Chrome
- Install Visual Studio Code
- Install cmder for highlighting the command line

- Install dependencies
   - devDependencies are what is needed to locally run the code 
      - We're using react-scripts as a dependency (takes the complexity out of creating your own dev environment)
         - this handles the complexity of webpack and babel for us 
   - dependencies are what are needed in the application to make it run
      - autoprefixer-stylus and stylus are for styling
      - firebase will be used to connect to the database
      - prop-types lets us specify what data gets passed in 
      - re-base lets us connect to firebase and sync in realtime
      - react and react-dom are react
      - react router lets us watch for changes
      - react-transition-group lets us have animations
   - scripts contain script commands that are run at various times in the lifecycle of the package
   - npm install fetches all of our dependencies in the package.json and downloads a copy of each so we can locally run the stuff

---

[2]

- Everything in React is a component
- A component is a reusable piece of your app 
- React Dev Tools lets us view all of the components and their states

---

[3]

- Default react page source contains a script that runs the bundled script file
   - webpack bundled it

- First thing we do is import our dependencies 
   - the npm install allowed us to import our modules into our code 
- Every component is going to be its own class 
   - the class extends React.component 
- Every class in React needs at least one method: render()
- The only time we touch the dom is when we mount our app to the page 

- In order to render to the DOM, we need to import react-dom 

- Components should be stored in their own files 

- You will always need to import React in your components

---

[4]

- JSX gives us an easier time writing React 
- Wrap JSX in parens when you want to return them on a different line from the return keyword 
- Wrap JSX in <React.Fragment></React.Fragment> tag to export sibling elements without extra wrapping elements
   - You can also include import { Fragment } and simply use <Fragment>
- JSX has no standard comments; you must use { /**/ }

---

[5]

- Styles can either be applied globally in the index.html or individually per component by importing the css file 
   - We did the latter

---

[6]

- The App component will be the main container 
- We scaffold out the app by inserting all of the components that we're gonna use into the 
App component

---

[7]

- Props are like HTML attributes
- Props allow us to get data into a component 

- $0 in the console gives us the last selected element
- $r in the console gives us the last selected element in React Dev Tools

---

[8]

- If you have a component that doesn't manage any state data you can convert it into a stateless
functional component 

- For example, header can be converted to:

   (import React ...)
   const Header = props => (the JSX);
   (export)

---

[9]

- Routing is handled by React-Router, in its own component 
- The main render render() call in index.js takes in the Router instead, and the router handles
what page to go to based on the URL

---

[10]

- Value attribute of an input must be attached to state in a React component
- To set the default value, you must use defaultValue

---

[11]

- React wraps all events in a SyntheticEvent object which ensures consistency across platforms

- handling events in React is the same as in vanilla javascript
   - React events are done inline

- The golden rule in React is: Don't touch the DOM! Do everything in terms of the React app 

- A ref allows us to access a DOM node on the page

- componentDidMount() is called when the component mounts into the page 

---

[12]

- Pushstate allows us to change the URL without reloading the page (done with React-router)

---

[13]

- State is an object that lives inside of a component that stores all of the data that that
component (and perhaps its children) needs
- State is a single source of truth
- React reacts to the changes in the state no matter where it is used

- the method that updates state and the actal state need to exist in the same component 
- In order to update state you need to use the existing setState API 
   1. Take a copy of the existing state
   2. Modify that copy as needed
   3. Pass the modified copy back into setState()

---

[14]

---

[15]

- For performance purposes, each element of an array or iterator must have a unique "key" prop

---

[16]

---

[17]

---

[18]

- Firebase uses websockets to act in realtime

- Re-base is a React firebase specific package
- allows us to mirror our state to our firebase

- firebase is the official firebase package

- lifecycle methods tell us when certain things are happening in the lifetime of the component

---

[19]

- You can use localStorage to have data persist in the browser
- localStorage is a collection of key-value pairs
- to set loacalStorage, use localStorage.setItem(key, value)
- to retrieve localStorage data, use localStorage.getItem(key)

---

[20]

---

[21]

---

[22]

- We animate the componentDidMount and componentWillUnmount

- react-transition-group lets us animate our components 

1. Wrap all animated elements in a <TransitionGroup component="theElement"> tag
2. Wrap individual elements in a <CSSTransition> tag
   - takes a timeout prop in the form of an object {{ enter: 100 , exit: 100 }}

- Stylus is exactly the same as SASS except it lets you use indentation, w/o brackets and semicolons

- Create-react-app doesn't let you use any custom CSS preprocessor unless you "eject"
- The "scripts" section on our package.json runs outside of our create-react-app
- the "styles" script compiles the stylus into CSS 
- the "styles-watch" watches for changes on the stylus script 
- the "concurrently" package lets you run multiple watches at once 

---

[23]

- Proptypes let us validate the data that we're passing into our props 
- Proptypes is a separate package 
   - Other ways that this could be done would be using Typescript, or use flow (Facebook utility)